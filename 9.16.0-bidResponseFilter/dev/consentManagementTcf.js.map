{"version":3,"file":"consentManagementTcf.js","mappings":"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","sources":["webpack://prebid.js/./modules/consentManagementTcf.js"],"sourcesContent":["/**\n * This module adds GDPR consentManagement support to prebid.js.  It interacts with\n * supported CMPs (Consent Management Platforms) to grab the user's consent information\n * and make it available for any GDPR supported adapters to read/pass this information to\n * their system.\n */\nimport {deepSetValue, isNumber, isPlainObject, isStr, logError, logInfo, logWarn} from '../src/utils.js';\nimport {config} from '../src/config.js';\nimport {gdprDataHandler} from '../src/adapterManager.js';\nimport {includes} from '../src/polyfill.js';\nimport {registerOrtbProcessor, REQUEST} from '../src/pbjsORTB.js';\nimport {enrichFPD} from '../src/fpd/enrichment.js';\nimport {getGlobal} from '../src/prebidGlobal.js';\nimport {cmpClient} from '../libraries/cmp/cmpClient.js';\nimport {consentManagementHook} from '../libraries/consentManagement/cmUtils.js';\n\nconst DEFAULT_CMP = 'iab';\nconst DEFAULT_CONSENT_TIMEOUT = 10000;\nconst CMP_VERSION = 2;\n\nexport let userCMP;\nexport let consentTimeout;\nexport let gdprScope;\nexport let staticConsentData;\nlet dsaPlatform = false;\nlet actionTimeout;\n\nlet consentData;\nlet addedConsentHook = false;\n\n// add new CMPs here, with their dedicated lookup function\nconst cmpCallMap = {\n  'iab': lookupIabConsent,\n  'static': lookupStaticConsentData\n};\n\n/**\n * This function reads the consent string from the config to obtain the consent information of the user.\n * @param {Object} options - An object containing the callbacks.\n * @param {function(Object): void} options.onSuccess - Acts as a success callback when the value is read from config; pass along consentObject from CMP.\n * @param {function(string, ...Object?): void} [options.onError] - Acts as an error callback while interacting with CMP; pass along an error message (string) and any extra error arguments (purely for logging). Optional.\n */\nfunction lookupStaticConsentData({onSuccess, onError}) {\n  processCmpData(staticConsentData, {onSuccess, onError})\n}\n\n/**\n * This function handles interacting with an IAB compliant CMP to obtain the consent information of the user.\n * Given the async nature of the CMP's API, we pass in acting success/error callback functions to exit this function\n * based on the appropriate result.\n * @param {Object} options - An object containing the callbacks.\n * @param {function(Object): void} options.onSuccess - Acts as a success callback when CMP returns a value; pass along consentObject from CMP.\n * @param {function(string, ...Object?): void} options.onError - Acts as an error callback while interacting with CMP; pass along an error message (string) and any extra error arguments (purely for logging).\n * @param {function(Object): void} options.onEvent - Acts as an event callback for processing TCF data events from CMP.\n */\nfunction lookupIabConsent({onSuccess, onError, onEvent}) {\n  function cmpResponseCallback(tcfData, success) {\n    logInfo('Received a response from CMP', tcfData);\n    if (success) {\n      onEvent(tcfData);\n      if (tcfData.gdprApplies === false || tcfData.eventStatus === 'tcloaded' || tcfData.eventStatus === 'useractioncomplete') {\n        processCmpData(tcfData, {onSuccess, onError});\n      }\n    } else {\n      onError('CMP unable to register callback function.  Please check CMP setup.');\n    }\n  }\n\n  const cmp = cmpClient({\n    apiName: '__tcfapi',\n    apiVersion: CMP_VERSION,\n    apiArgs: ['command', 'version', 'callback', 'parameter'],\n  });\n\n  if (!cmp) {\n    return onError('TCF2 CMP not found.');\n  }\n  if (cmp.isDirect) {\n    logInfo('Detected CMP API is directly accessible, calling it now...');\n  } else {\n    logInfo('Detected CMP is outside the current iframe where Prebid.js is located, calling it now...');\n  }\n\n  cmp({\n    command: 'addEventListener',\n    callback: cmpResponseCallback\n  })\n}\n\n/**\n * Look up consent data and store it in the `consentData` global as well as `adapterManager.js`' gdprDataHandler.\n *\n * @param cb A callback that takes: a boolean that is true if the auction should be canceled; an error message and extra\n * error arguments that will be undefined if there's no error.\n */\nfunction loadConsentData(cb) {\n  let isDone = false;\n  let timer = null;\n  let onTimeout, provisionalConsent;\n  let cmpLoaded = false;\n\n  function resetTimeout(timeout) {\n    if (timer != null) {\n      clearTimeout(timer);\n    }\n    if (!isDone && timeout != null) {\n      if (timeout === 0) {\n        onTimeout()\n      } else {\n        timer = setTimeout(onTimeout, timeout);\n      }\n    }\n  }\n\n  function done(consentData, shouldCancelAuction, errMsg, ...extraArgs) {\n    resetTimeout(null);\n    isDone = true;\n    gdprDataHandler.setConsentData(consentData);\n    if (typeof cb === 'function') {\n      cb(shouldCancelAuction, errMsg, ...extraArgs);\n    }\n  }\n\n  if (!includes(Object.keys(cmpCallMap), userCMP)) {\n    done(null, false, `CMP framework (${userCMP}) is not a supported framework.  Aborting consentManagement module and resuming auction.`);\n    return;\n  }\n\n  const callbacks = {\n    onSuccess: (data) => done(data, false),\n    onError: function (msg, ...extraArgs) {\n      done(null, true, msg, ...extraArgs);\n    },\n    onEvent: function (consentData) {\n      provisionalConsent = consentData;\n      if (cmpLoaded) return;\n      cmpLoaded = true;\n      if (actionTimeout != null) {\n        resetTimeout(actionTimeout);\n      }\n    }\n  }\n\n  onTimeout = () => {\n    const continueToAuction = (data) => {\n      done(data, false, `${cmpLoaded ? 'Timeout waiting for user action on CMP' : 'CMP did not load'}, continuing auction...`);\n    }\n    processCmpData(provisionalConsent, {\n      onSuccess: continueToAuction,\n      onError: () => continueToAuction(storeConsentData(undefined)),\n    })\n  }\n\n  cmpCallMap[userCMP](callbacks);\n  if (!(actionTimeout != null && cmpLoaded)) {\n    resetTimeout(consentTimeout);\n  }\n}\n\n/**\n * If consentManagement module is enabled (ie included in setConfig), this hook function will attempt to fetch the\n * user's encoded consent string from the supported CMP.  Once obtained, the module will store this\n * data as part of a gdprConsent object which gets transferred to adapterManager's gdprDataHandler object.\n * This information is later added into the bidRequest object for any supported adapters to read/pass along to their system.\n * @param {object} reqBidsConfigObj required; This is the same param that's used in pbjs.requestBids.\n * @param {function} fn required; The next function in the chain, used by hook.js\n */\nexport const requestBidsHook = consentManagementHook('gdpr', () => consentData, loadConsentData);\n\n/**\n * This function checks the consent data provided by CMP to ensure it's in an expected state.\n * If it's bad, we call `onError`\n * If it's good, then we store the value and call `onSuccess`\n */\nfunction processCmpData(consentObject, {onSuccess, onError}) {\n  function checkData() {\n    // if CMP does not respond with a gdprApplies boolean, use defaultGdprScope (gdprScope)\n    const gdprApplies = consentObject && typeof consentObject.gdprApplies === 'boolean' ? consentObject.gdprApplies : gdprScope;\n    const tcString = consentObject && consentObject.tcString;\n    return !!(\n      (typeof gdprApplies !== 'boolean') ||\n      (gdprApplies === true && (!tcString || !isStr(tcString)))\n    );\n  }\n\n  if (checkData()) {\n    onError(`CMP returned unexpected value during lookup process.`, consentObject);\n  } else {\n    onSuccess(storeConsentData(consentObject));\n  }\n}\n\n/**\n * Stores CMP data locally in module to make information available in adaptermanager.js for later in the auction\n * @param {object} cmpConsentObject required; an object representing user's consent choices (can be undefined in certain use-cases for this function only)\n */\nfunction storeConsentData(cmpConsentObject) {\n  consentData = {\n    consentString: (cmpConsentObject) ? cmpConsentObject.tcString : undefined,\n    vendorData: (cmpConsentObject) || undefined,\n    gdprApplies: cmpConsentObject && typeof cmpConsentObject.gdprApplies === 'boolean' ? cmpConsentObject.gdprApplies : gdprScope\n  };\n  if (cmpConsentObject && cmpConsentObject.addtlConsent && isStr(cmpConsentObject.addtlConsent)) {\n    consentData.addtlConsent = cmpConsentObject.addtlConsent;\n  }\n  consentData.apiVersion = CMP_VERSION;\n  return consentData;\n}\n\n/**\n * Simply resets the module's consentData variable back to undefined, mainly for testing purposes\n */\nexport function resetConsentData() {\n  consentData = undefined;\n  userCMP = undefined;\n  consentTimeout = undefined;\n  gdprDataHandler.reset();\n}\n\n/**\n * A configuration function that initializes some module variables, as well as add a hook into the requestBids function\n * @param {{cmp:string, timeout:number, defaultGdprScope:boolean}} config required; consentManagement module config settings; cmp (string), timeout (int))\n */\nexport function setConsentConfig(config) {\n  // if `config.gdpr`, `config.usp` or `config.gpp` exist, assume new config format.\n  // else for backward compatability, just use `config`\n  config = config && (config.gdpr || config.usp || config.gpp ? config.gdpr : config);\n  if (!config || typeof config !== 'object') {\n    logWarn('consentManagement (gdpr) config not defined, exiting consent manager');\n    return;\n  }\n  if (isStr(config.cmpApi)) {\n    userCMP = config.cmpApi;\n  } else {\n    userCMP = DEFAULT_CMP;\n    logInfo(`consentManagement config did not specify cmp.  Using system default setting (${DEFAULT_CMP}).`);\n  }\n\n  if (isNumber(config.timeout)) {\n    consentTimeout = config.timeout;\n  } else {\n    consentTimeout = DEFAULT_CONSENT_TIMEOUT;\n    logInfo(`consentManagement config did not specify timeout.  Using system default setting (${DEFAULT_CONSENT_TIMEOUT}).`);\n  }\n\n  actionTimeout = isNumber(config.actionTimeout) ? config.actionTimeout : null;\n\n  // if true, then gdprApplies should be set to true\n  gdprScope = config.defaultGdprScope === true;\n  dsaPlatform = !!config.dsaPlatform;\n\n  logInfo('consentManagement module has been activated...');\n\n  if (userCMP === 'static') {\n    if (isPlainObject(config.consentData)) {\n      staticConsentData = config.consentData;\n      if (staticConsentData?.getTCData != null) {\n        // accept static config with or without `getTCData` - see https://github.com/prebid/Prebid.js/issues/9581\n        staticConsentData = staticConsentData.getTCData;\n      }\n      consentTimeout = 0;\n    } else {\n      logError(`consentManagement config with cmpApi: 'static' did not specify consentData. No consents will be available to adapters.`);\n    }\n  }\n  if (!addedConsentHook) {\n    getGlobal().requestBids.before(requestBidsHook, 50);\n  }\n  addedConsentHook = true;\n  gdprDataHandler.enable();\n  loadConsentData(); // immediately look up consent data to make it available without requiring an auction\n}\nconfig.getConfig('consentManagement', config => setConsentConfig(config.consentManagement));\n\nexport function enrichFPDHook(next, fpd) {\n  return next(fpd.then(ortb2 => {\n    const consent = gdprDataHandler.getConsentData();\n    if (consent) {\n      if (typeof consent.gdprApplies === 'boolean') {\n        deepSetValue(ortb2, 'regs.ext.gdpr', consent.gdprApplies ? 1 : 0);\n      }\n      deepSetValue(ortb2, 'user.ext.consent', consent.consentString);\n    }\n    if (dsaPlatform) {\n      deepSetValue(ortb2, 'regs.ext.dsa.dsarequired', 3);\n    }\n    return ortb2;\n  }));\n}\n\nenrichFPD.before(enrichFPDHook);\n\nexport function setOrtbAdditionalConsent(ortbRequest, bidderRequest) {\n  // this is not a standardized name for addtlConsent, so keep this as an ORTB library processor rather than an FPD enrichment\n  const addtl = bidderRequest.gdprConsent?.addtlConsent;\n  if (addtl && typeof addtl === 'string') {\n    deepSetValue(ortbRequest, 'user.ext.ConsentedProvidersSettings.consented_providers', addtl);\n  }\n}\n\nregisterOrtbProcessor({type: REQUEST, name: 'gdprAddtlConsent', fn: setOrtbAdditionalConsent})\n"],"names":["registerModule","__r0","deepSetValue","isNumber","isPlainObject","isStr","logError","logInfo","logWarn","config","gdprDataHandler","includes","registerOrtbProcessor","REQUEST","enrichFPD","getGlobal","cmpClient","consentManagementHook","DEFAULT_CMP","DEFAULT_CONSENT_TIMEOUT","CMP_VERSION","userCMP","consentTimeout","gdprScope","staticConsentData","dsaPlatform","actionTimeout","consentData","addedConsentHook","cmpCallMap","lookupIabConsent","lookupStaticConsentData","_ref","onSuccess","onError","processCmpData","_ref2","onEvent","cmpResponseCallback","tcfData","success","gdprApplies","eventStatus","cmp","apiName","apiVersion","apiArgs","isDirect","command","callback","loadConsentData","cb","isDone","timer","onTimeout","provisionalConsent","cmpLoaded","resetTimeout","timeout","clearTimeout","setTimeout","done","shouldCancelAuction","errMsg","setConsentData","_len","arguments","length","extraArgs","Array","_key","Object","keys","callbacks","data","msg","_len2","_key2","continueToAuction","storeConsentData","undefined","requestBidsHook","consentObject","_ref3","checkData","tcString","cmpConsentObject","consentString","vendorData","addtlConsent","resetConsentData","reset","setConsentConfig","gdpr","usp","gpp","cmpApi","defaultGdprScope","getTCData","requestBids","before","enable","getConfig","consentManagement","enrichFPDHook","next","fpd","then","ortb2","consent","getConsentData","setOrtbAdditionalConsent","ortbRequest","bidderRequest","addtl","gdprConsent","type","name","fn"],"sourceRoot":""}