{"version":3,"file":"consentManagement.js","mappings":";;;;;;;;;;;;;;AAAgE;AACF;AAEvD,SAASI,qBAAqBA,CAACC,IAAI,EAAEC,UAAU,EAAEC,eAAe,EAAE;EACvE,SAASC,aAAaA,CAACC,EAAE,EAAE;IACzB,IAAIH,UAAU,CAAC,CAAC,EAAE;MAChBJ,sDAAO,CAAC,mFAAmF,CAAC;MAC5F;MACAO,EAAE,CAAC,KAAK,CAAC;IACX,CAAC,MAAM;MACLF,eAAe,CAACE,EAAE,CAAC;IACrB;EACF;EAEA,OAAOT,2EAAgB,CAACK,IAAI,EAAE,SAASK,eAAeA,CAACC,EAAE,EAAEC,gBAAgB,EAAE;IAC3EJ,aAAa,CAAC,UAAUK,mBAAmB,EAAEC,MAAM,EAAgB;MACjE,IAAIA,MAAM,EAAE;QACV,IAAIC,GAAG,GAAGZ,kDAAO;QACjB,IAAIU,mBAAmB,EAAE;UACvBE,GAAG,GAAGd,mDAAQ;UACda,MAAM,GAAG,GAAGA,MAAM,qDAAqD;QACzE;QAAC,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EANmDC,SAAS,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;UAATF,SAAS,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;QAAA;QAO7DN,GAAG,CAACD,MAAM,EAAE,GAAGK,SAAS,CAAC;MAC3B;MAEA,IAAIN,mBAAmB,EAAE;QACvBF,EAAE,CAACW,UAAU,CAAC,CAAC;QACf,IAAI,OAAOV,gBAAgB,CAACW,eAAe,KAAK,UAAU,EAAE;UAC1DX,gBAAgB,CAACW,eAAe,CAAC,CAAC;QACpC,CAAC,MAAM;UACLtB,uDAAQ,CAAC,iCAAiC,CAAC;QAC7C;MACF,CAAC,MAAM;QACLU,EAAE,CAACa,IAAI,CAAC,IAAI,EAAEZ,gBAAgB,CAAC;MACjC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","sources":["webpack://prebid.js/./libraries/consentManagement/cmUtils.js"],"sourcesContent":["import {timedAuctionHook} from '../../src/utils/perfMetrics.js';\nimport {logError, logInfo, logWarn} from '../../src/utils.js';\n\nexport function consentManagementHook(name, getConsent, loadConsentData) {\n  function loadIfMissing(cb) {\n    if (getConsent()) {\n      logInfo('User consent information already known.  Pulling internally stored information...');\n      // eslint-disable-next-line standard/no-callback-literal\n      cb(false);\n    } else {\n      loadConsentData(cb);\n    }\n  }\n\n  return timedAuctionHook(name, function requestBidsHook(fn, reqBidsConfigObj) {\n    loadIfMissing(function (shouldCancelAuction, errMsg, ...extraArgs) {\n      if (errMsg) {\n        let log = logWarn;\n        if (shouldCancelAuction) {\n          log = logError;\n          errMsg = `${errMsg} Canceling auction as per consentManagement config.`;\n        }\n        log(errMsg, ...extraArgs);\n      }\n\n      if (shouldCancelAuction) {\n        fn.stopTiming();\n        if (typeof reqBidsConfigObj.bidsBackHandler === 'function') {\n          reqBidsConfigObj.bidsBackHandler();\n        } else {\n          logError('Error executing bidsBackHandler');\n        }\n      } else {\n        fn.call(this, reqBidsConfigObj);\n      }\n    });\n  });\n}\n"],"names":["timedAuctionHook","logError","logInfo","logWarn","consentManagementHook","name","getConsent","loadConsentData","loadIfMissing","cb","requestBidsHook","fn","reqBidsConfigObj","shouldCancelAuction","errMsg","log","_len","arguments","length","extraArgs","Array","_key","stopTiming","bidsBackHandler","call"],"sourceRoot":""}