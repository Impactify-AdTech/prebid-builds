{"version":3,"file":"cmp.js","mappings":"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","sources":["webpack://prebid.js/./libraries/cmp/cmpClient.js"],"sourcesContent":["import {GreedyPromise} from '../../src/utils/promise.js';\n\n/**\n * @typedef {function} CMPClient\n *\n * @param {{}} params CMP parameters. Currently this is a subset of {command, callback, parameter, version}.\n * @param {boolean} once if true, discard cross-frame event listeners once a reply message is received.\n * @returns {Promise<*>} a promise to the API's \"result\" - see the `mode` argument to `cmpClient` on how that's determined.\n * @property {boolean} isDirect true if the CMP is directly accessible (no postMessage required)\n * @property {() => void} close close the client; currently, this just stops listening for cross-frame messages.\n */\n\nexport const MODE_MIXED = 0;\nexport const MODE_RETURN = 1;\nexport const MODE_CALLBACK = 2;\n\n/**\n * Returns a client function that can interface with a CMP regardless of where it's located.\n *\n * @param {object} obj\n * @param obj.apiName name of the CMP api, e.g. \"__gpp\"\n * @param [obj.apiVersion] CMP API version\n * @param [obj.apiArgs] names of the arguments taken by the api function, in order.\n * @param [obj.callbackArgs] names of the cross-frame response payload properties that should be passed as callback arguments, in order\n * @param [obj.mode] controls the callbacks passed to the underlying API, and how the promises returned by the client are resolved.\n *\n * The client behaves differently when it's provided a `callback` argument vs when it's not - for short, let's name these\n * cases \"subscriptions\" and \"one-shot calls\" respectively:\n *\n * With `mode: MODE_MIXED` (the default), promises returned on subscriptions are resolved to undefined when the callback\n * is first run (that is, the promise resolves when the CMP replies, but what it replies with is discarded and\n * left for the callback to deal with). For one-shot calls, the returned promise is resolved to the API's\n * return value when it's directly accessible, or with the result from the first (and, presumably, the only)\n * cross-frame reply when it's not;\n *\n * With `mode: MODE_RETURN`, the returned promise always resolves to the API's return value - which is taken to be undefined\n * when cross-frame;\n *\n * With `mode: MODE_CALLBACK`, the underlying API is expected to never directly return anything significant; instead,\n * it should always accept a callback and - for one-shot calls - invoke it only once with the result. The client will\n * automatically generate an appropriate callback for one-shot calls and use the result it's given to resolve\n * the returned promise. Subscriptions are treated in the same way as MODE_MIXED.\n *\n * @param win\n * @returns {CMPClient} CMP invocation function (or null if no CMP was found).\n */\nexport function cmpClient(\n  {\n    apiName,\n    apiVersion,\n    apiArgs = ['command', 'callback', 'parameter', 'version'],\n    callbackArgs = ['returnValue', 'success'],\n    mode = MODE_MIXED,\n  },\n  win = window\n) {\n  const cmpCallbacks = {};\n  const callName = `${apiName}Call`;\n  const cmpDataPkgName = `${apiName}Return`;\n\n  function handleMessage(event) {\n    const json = (typeof event.data === 'string' && event.data.includes(cmpDataPkgName)) ? JSON.parse(event.data) : event.data;\n    if (json?.[cmpDataPkgName]?.callId) {\n      const payload = json[cmpDataPkgName];\n\n      if (cmpCallbacks.hasOwnProperty(payload.callId)) {\n        cmpCallbacks[payload.callId](...callbackArgs.map(name => payload[name]));\n      }\n    }\n  }\n\n  function findCMP() {\n    let f = win;\n    let cmpFrame;\n    let isDirect = false;\n    while (f != null) {\n      try {\n        if (typeof f[apiName] === 'function') {\n          cmpFrame = f;\n          isDirect = true;\n          break;\n        }\n      } catch (e) {\n      }\n\n      // need separate try/catch blocks due to the exception errors thrown when trying to check for a frame that doesn't exist in 3rd party env\n      try {\n        if (f.frames[`${apiName}Locator`]) {\n          cmpFrame = f;\n          break;\n        }\n      } catch (e) {\n      }\n\n      if (f === win.top) break;\n      f = f.parent;\n    }\n\n    return [\n      cmpFrame,\n      isDirect\n    ];\n  }\n\n  const [cmpFrame, isDirect] = findCMP();\n\n  if (!cmpFrame) {\n    return;\n  }\n\n  function resolveParams(params) {\n    params = Object.assign({version: apiVersion}, params);\n    return apiArgs.map(arg => [arg, params[arg]])\n  }\n\n  function wrapCallback(callback, resolve, reject, preamble) {\n    const haveCb = typeof callback === 'function';\n\n    return function (result, success) {\n      preamble && preamble();\n      if (mode !== MODE_RETURN) {\n        const resolver = success == null || success ? resolve : reject;\n        resolver(haveCb ? undefined : result);\n      }\n      haveCb && callback.apply(this, arguments);\n    }\n  }\n\n  let client;\n\n  if (isDirect) {\n    client = function invokeCMPDirect(params = {}) {\n      return new GreedyPromise((resolve, reject) => {\n        const ret = cmpFrame[apiName](...resolveParams({\n          ...params,\n          callback: (params.callback || mode === MODE_CALLBACK) ? wrapCallback(params.callback, resolve, reject) : undefined,\n        }).map(([_, val]) => val));\n        if (mode === MODE_RETURN || (params.callback == null && mode === MODE_MIXED)) {\n          resolve(ret);\n        }\n      });\n    };\n  } else {\n    win.addEventListener('message', handleMessage, false);\n\n    client = function invokeCMPFrame(params, once = false) {\n      return new GreedyPromise((resolve, reject) => {\n        // call CMP via postMessage\n        const callId = Math.random().toString();\n        const msg = {\n          [callName]: {\n            ...Object.fromEntries(resolveParams(params).filter(([param]) => param !== 'callback')),\n            callId: callId\n          }\n        };\n\n        cmpCallbacks[callId] = wrapCallback(params?.callback, resolve, reject, (once || params?.callback == null) && (() => { delete cmpCallbacks[callId] }));\n        cmpFrame.postMessage(msg, '*');\n        if (mode === MODE_RETURN) resolve();\n      });\n    };\n  }\n  return Object.assign(client, {\n    isDirect,\n    close() {\n      !isDirect && win.removeEventListener('message', handleMessage);\n    }\n  })\n}\n"],"names":["GreedyPromise","MODE_MIXED","MODE_RETURN","MODE_CALLBACK","cmpClient","_ref","apiName","apiVersion","_ref$apiArgs","apiArgs","_ref$callbackArgs","callbackArgs","_ref$mode","mode","win","arguments","length","undefined","window","cmpCallbacks","callName","concat","cmpDataPkgName","handleMessage","event","_json$cmpDataPkgName","json","data","includes","JSON","parse","callId","payload","hasOwnProperty","apply","_toConsumableArray","map","name","findCMP","f","cmpFrame","isDirect","e","frames","top","parent","_findCMP","_findCMP2","_slicedToArray","resolveParams","params","Object","assign","version","arg","wrapCallback","callback","resolve","reject","preamble","haveCb","result","success","resolver","client","invokeCMPDirect","ret","_objectSpread","_ref2","_ref3","_","val","addEventListener","invokeCMPFrame","once","Math","random","toString","msg","_defineProperty","fromEntries","filter","_ref4","_ref5","param","postMessage","close","removeEventListener"],"sourceRoot":""}