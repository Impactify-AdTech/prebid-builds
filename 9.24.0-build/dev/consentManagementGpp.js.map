{"version":3,"file":"consentManagementGpp.js","mappings":"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","sources":["webpack://prebid.js/./modules/consentManagementGpp.js"],"sourcesContent":["/**\n * This module adds GPP consentManagement support to prebid.js.  It interacts with\n * supported CMPs (Consent Management Platforms) to grab the user's consent information\n * and make it available for any GPP supported adapters to read/pass this information to\n * their system and for various other features/modules in Prebid.js.\n */\nimport {deepSetValue, isEmpty, isNumber, isPlainObject, isStr, logError, logInfo, logWarn} from '../src/utils.js';\nimport {config} from '../src/config.js';\nimport {gppDataHandler} from '../src/adapterManager.js';\nimport {enrichFPD} from '../src/fpd/enrichment.js';\nimport {getGlobal} from '../src/prebidGlobal.js';\nimport {cmpClient, MODE_CALLBACK} from '../libraries/cmp/cmpClient.js';\nimport {GreedyPromise, defer} from '../src/utils/promise.js';\nimport {buildActivityParams} from '../src/activities/params.js';\nimport {consentManagementHook} from '../libraries/consentManagement/cmUtils.js';\n\nconst DEFAULT_CMP = 'iab';\nconst DEFAULT_CONSENT_TIMEOUT = 10000;\n\nexport let userCMP;\nexport let consentTimeout;\nlet staticConsentData;\n\nlet consentData;\nlet addedConsentHook = false;\n\nfunction pipeCallbacks(fn, {onSuccess, onError}) {\n  new GreedyPromise((resolve) => resolve(fn())).then(onSuccess, (err) => {\n    if (err instanceof GPPError) {\n      onError(err.message, ...err.args);\n    } else {\n      onError(`GPP error:`, err);\n    }\n  });\n}\n\nfunction lookupStaticConsentData(callbacks) {\n  return pipeCallbacks(() => processCmpData(staticConsentData), callbacks);\n}\n\nclass GPPError {\n  constructor(message, arg) {\n    this.message = message;\n    this.args = arg == null ? [] : [arg];\n  }\n}\n\nexport class GPPClient {\n  apiVersion = '1.1';\n  static INST;\n\n  static get(mkCmp = cmpClient) {\n    if (this.INST == null) {\n      const cmp = mkCmp({\n        apiName: '__gpp',\n        apiArgs: ['command', 'callback', 'parameter'], // do not pass version - not clear what it's for (or what we should use),\n        mode: MODE_CALLBACK\n      });\n      if (cmp == null) {\n        throw new GPPError('GPP CMP not found');\n      }\n      this.INST = new this(cmp);\n    }\n    return this.INST;\n  }\n\n  #resolve;\n  #reject;\n  #pending = [];\n\n  initialized = false;\n\n  constructor(cmp) {\n    this.cmp = cmp;\n    [this.#resolve, this.#reject] = ['resolve', 'reject'].map(slot => (result) => {\n      while (this.#pending.length) {\n        this.#pending.pop()[slot](result);\n      }\n    });\n  }\n\n  /**\n   * initialize this client - update consent data if already available,\n   * and set up event listeners to also update on CMP changes\n   *\n   * @param pingData\n   * @returns {Promise<{}>} a promise to GPP consent data\n   */\n  init(pingData) {\n    const ready = this.updateWhenReady(pingData);\n    if (!this.initialized) {\n      if (pingData.gppVersion !== this.apiVersion) {\n        logWarn(`Unrecognized GPP CMP version: ${pingData.apiVersion}. Continuing using GPP API version ${this.apiVersion}...`);\n      }\n      this.initialized = true;\n      this.cmp({\n        command: 'addEventListener',\n        callback: (event, success) => {\n          if (success != null && !success) {\n            this.#reject(new GPPError('Received error response from CMP', event));\n          } else if (event?.pingData?.cmpStatus === 'error') {\n            this.#reject(new GPPError('CMP status is \"error\"; please check CMP setup', event));\n          } else if (this.isCMPReady(event?.pingData || {}) && ['sectionChange', 'signalStatus'].includes(event?.eventName)) {\n            this.#resolve(this.updateConsent(event.pingData));\n          }\n          // NOTE: according to https://github.com/InteractiveAdvertisingBureau/Global-Privacy-Platform/blob/main/Core/CMP%20API%20Specification.md,\n          // > [signalStatus] Event is called whenever the display status of the CMP changes (e.g. the CMP shows the consent layer).\n          //\n          // however, from real world testing, at least some CMPs only trigger 'cmpDisplayStatus'\n          // other CMPs may do something else yet; here we just look for 'signalStatus: not ready' on any event\n          // to decide if consent data is likely to change\n          if (consentData != null && event?.pingData != null && !this.isCMPReady(event.pingData)) {\n            consentData = null;\n          }\n        }\n      });\n    }\n    return ready;\n  }\n\n  refresh() {\n    return this.cmp({command: 'ping'}).then(this.init.bind(this));\n  }\n\n  /**\n   * Retrieve and store GPP consent data.\n   *\n   * @param pingData\n   * @returns {Promise<{}>} a promise to GPP consent data\n   */\n  updateConsent(pingData) {\n    return new GreedyPromise(resolve => {\n      if (pingData == null || isEmpty(pingData)) {\n        throw new GPPError('Received empty response from CMP', pingData);\n      }\n      const consentData = processCmpData(pingData);\n      logInfo('Retrieved GPP consent from CMP:', consentData);\n      resolve(consentData);\n    })\n  }\n\n  /**\n   * Return a promise to GPP consent data, to be retrieved the next time the CMP signals it's ready.\n   *\n   * @returns {Promise<{}>}\n   */\n  nextUpdate() {\n    const def = defer();\n    this.#pending.push(def);\n    return def.promise;\n  }\n\n  /**\n   * Return a promise to GPP consent data, to be retrieved immediately if the CMP is ready according to `pingData`,\n   * or as soon as it signals that it's ready otherwise.\n   *\n   * @param pingData\n   * @returns {Promise<{}>}\n   */\n  updateWhenReady(pingData) {\n    return this.isCMPReady(pingData) ? this.updateConsent(pingData) : this.nextUpdate();\n  }\n\n  isCMPReady(pingData) {\n    return pingData.signalStatus === 'ready';\n  }\n}\n\n/**\n * This function handles interacting with an IAB compliant CMP to obtain the consent information of the user.\n * Given the async nature of the CMP's API, we pass in acting success/error callback functions to exit this function\n * based on the appropriate result.\n * @param {Object} options - An object containing the callbacks.\n * @param {function(Object): void} options.onSuccess - Acts as a success callback when CMP returns a value; pass along consentObject from CMP.\n * @param {function(string, ...Object?): void} options.onError - Acts as an error callback while interacting with CMP; pass along an error message (string) and any extra error arguments (purely for logging).\n * @param {function(): Object} [mkCmp=cmpClient] - A function to create the CMP client. Defaults to `cmpClient`.\n */\nexport function lookupIabConsent({onSuccess, onError}, mkCmp = cmpClient) {\n  pipeCallbacks(() => GPPClient.get(mkCmp).refresh(), {onSuccess, onError});\n}\n\n// add new CMPs here, with their dedicated lookup function\nconst cmpCallMap = {\n  'iab': lookupIabConsent,\n  'static': lookupStaticConsentData\n};\n\n/**\n * Look up consent data and store it in the `consentData` global as well as `adapterManager.js`' gdprDataHandler.\n *\n * @param cb A callback that takes: a boolean that is true if the auction should be canceled; an error message and extra\n * error arguments that will be undefined if there's no error.\n */\nfunction loadConsentData(cb) {\n  let isDone = false;\n  let timer = null;\n\n  function done(consentData, shouldCancelAuction, errMsg, ...extraArgs) {\n    if (timer != null) {\n      clearTimeout(timer);\n    }\n    isDone = true;\n    gppDataHandler.setConsentData(consentData);\n    if (typeof cb === 'function') {\n      cb(shouldCancelAuction, errMsg, ...extraArgs);\n    }\n  }\n\n  if (!cmpCallMap.hasOwnProperty(userCMP)) {\n    done(null, false, `GPP CMP framework (${userCMP}) is not a supported framework.  Aborting consentManagement module and resuming auction.`);\n    return;\n  }\n\n  const callbacks = {\n    onSuccess: (data) => done(data, false),\n    onError: function (msg, ...extraArgs) {\n      done(null, true, msg, ...extraArgs);\n    }\n  };\n  cmpCallMap[userCMP](callbacks);\n\n  if (!isDone) {\n    const onTimeout = () => {\n      const continueToAuction = (data) => {\n        done(data, false, 'GPP CMP did not load, continuing auction...');\n      };\n      pipeCallbacks(() => processCmpData(consentData), {\n        onSuccess: continueToAuction,\n        onError: () => continueToAuction(storeConsentData())\n      });\n    };\n    if (consentTimeout === 0) {\n      onTimeout();\n    } else {\n      timer = setTimeout(onTimeout, consentTimeout);\n    }\n  }\n}\n\n/**\n * If consentManagement module is enabled (ie included in setConfig), this hook function will attempt to fetch the\n * user's encoded consent string from the supported CMP.  Once obtained, the module will store this\n * data as part of a gppConsent object which gets transferred to adapterManager's gppDataHandler object.\n * This information is later added into the bidRequest object for any supported adapters to read/pass along to their system.\n * @param {object} reqBidsConfigObj required; This is the same param that's used in pbjs.requestBids.\n * @param {function} fn required; The next function in the chain, used by hook.js\n */\nexport const requestBidsHook = consentManagementHook('gpp', () => consentData, loadConsentData);\n\nfunction processCmpData(consentData) {\n  if (\n    (consentData?.applicableSections != null && !Array.isArray(consentData.applicableSections)) ||\n    (consentData?.gppString != null && !isStr(consentData.gppString)) ||\n    (consentData?.parsedSections != null && !isPlainObject(consentData.parsedSections))\n  ) {\n    throw new GPPError('CMP returned unexpected value during lookup process.', consentData);\n  }\n  ['usnatv1', 'uscav1'].forEach(section => {\n    if (consentData?.parsedSections?.[section]) {\n      logWarn(`Received invalid section from cmp: '${section}'. Some functionality may not work as expected`, consentData);\n    }\n  });\n  return storeConsentData(consentData);\n}\n\n/**\n * Stores CMP data locally in module to make information available in adaptermanager.js for later in the auction\n * @param {{}} gppData the result of calling a CMP's `getGPPData` (or equivalent)\n */\nexport function storeConsentData(gppData = {}) {\n  consentData = {\n    gppString: gppData?.gppString,\n    applicableSections: gppData?.applicableSections || [],\n    parsedSections: gppData?.parsedSections || {},\n    gppData: gppData\n  };\n  gppDataHandler.setConsentData(gppData);\n  return consentData;\n}\n\n/**\n * Simply resets the module's consentData variable back to undefined, mainly for testing purposes\n */\nexport function resetConsentData() {\n  consentData = undefined;\n  userCMP = undefined;\n  consentTimeout = undefined;\n  gppDataHandler.reset();\n  GPPClient.INST = null;\n}\n\n/**\n * A configuration function that initializes some module variables, as well as add a hook into the requestBids function\n * @param {{cmp:string, timeout:number, defaultGdprScope:boolean}} config required; consentManagement module config settings; cmp (string), timeout (int))\n */\nexport function setConsentConfig(config) {\n  config = config && config.gpp;\n  if (!config || typeof config !== 'object') {\n    logWarn('consentManagement.gpp config not defined, exiting consent manager module');\n    return;\n  }\n\n  if (isStr(config.cmpApi)) {\n    userCMP = config.cmpApi;\n  } else {\n    userCMP = DEFAULT_CMP;\n    logInfo(`consentManagement.gpp config did not specify cmp.  Using system default setting (${DEFAULT_CMP}).`);\n  }\n\n  if (isNumber(config.timeout)) {\n    consentTimeout = config.timeout;\n  } else {\n    consentTimeout = DEFAULT_CONSENT_TIMEOUT;\n    logInfo(`consentManagement.gpp config did not specify timeout.  Using system default setting (${DEFAULT_CONSENT_TIMEOUT}).`);\n  }\n\n  if (userCMP === 'static') {\n    if (isPlainObject(config.consentData)) {\n      staticConsentData = config.consentData;\n      consentTimeout = 0;\n    } else {\n      logError(`consentManagement.gpp config with cmpApi: 'static' did not specify consentData. No consents will be available to adapters.`);\n    }\n  }\n\n  logInfo('consentManagement.gpp module has been activated...');\n\n  if (!addedConsentHook) {\n    getGlobal().requestBids.before(requestBidsHook, 50);\n    buildActivityParams.before((next, params) => {\n      return next(Object.assign({gppConsent: gppDataHandler.getConsentData()}, params));\n    });\n  }\n  addedConsentHook = true;\n  gppDataHandler.enable();\n  loadConsentData(); // immediately look up consent data to make it available without requiring an auction\n}\n\nconfig.getConfig('consentManagement', config => setConsentConfig(config.consentManagement));\n\nexport function enrichFPDHook(next, fpd) {\n  return next(fpd.then(ortb2 => {\n    const consent = gppDataHandler.getConsentData();\n    if (consent) {\n      if (Array.isArray(consent.applicableSections)) {\n        deepSetValue(ortb2, 'regs.gpp_sid', consent.applicableSections);\n      }\n      deepSetValue(ortb2, 'regs.gpp', consent.gppString);\n    }\n    return ortb2;\n  }));\n}\n\nenrichFPD.before(enrichFPDHook);\n"],"names":["registerModule","__r0","deepSetValue","isEmpty","isNumber","isPlainObject","isStr","logError","logInfo","logWarn","config","gppDataHandler","enrichFPD","getGlobal","cmpClient","MODE_CALLBACK","GreedyPromise","defer","buildActivityParams","consentManagementHook","DEFAULT_CMP","DEFAULT_CONSENT_TIMEOUT","userCMP","consentTimeout","staticConsentData","consentData","addedConsentHook","pipeCallbacks","fn","_ref","onSuccess","onError","resolve","then","err","GPPError","message","args","lookupStaticConsentData","callbacks","processCmpData","constructor","arg","GPPClient","apiVersion","INST","get","mkCmp","arguments","length","undefined","cmp","apiName","apiArgs","mode","reject","pending","initialized","map","slot","result","pop","init","pingData","ready","updateWhenReady","gppVersion","command","callback","event","success","cmpStatus","isCMPReady","includes","eventName","updateConsent","refresh","bind","nextUpdate","def","push","promise","signalStatus","lookupIabConsent","_ref2","cmpCallMap","loadConsentData","cb","isDone","timer","done","shouldCancelAuction","errMsg","clearTimeout","setConsentData","_len","extraArgs","Array","_key","hasOwnProperty","data","msg","_len2","_key2","onTimeout","continueToAuction","storeConsentData","setTimeout","requestBidsHook","applicableSections","isArray","gppString","parsedSections","forEach","section","gppData","resetConsentData","reset","setConsentConfig","gpp","cmpApi","timeout","requestBids","before","next","params","Object","assign","gppConsent","getConsentData","enable","getConfig","consentManagement","enrichFPDHook","fpd","ortb2","consent"],"sourceRoot":""}